public client class {{pascalcase methodName}}StreamingClient {
    private grpc:StreamingClient sClient;

    isolated function init(grpc:StreamingClient sClient) {
        self.sClient = sClient;
    }

    isolated remote function send{{#if inputType}}{{inputType}}{{/if}}({{#if inputType}}{{inputType}} message{{/if}}) returns grpc:Error? {
        {{#unless inputType}}Empty message = {};{{/unless}}
        return self.sClient->send(message);
    }

    isolated remote function sendContext{{#if inputType}}{{removeSpecialCharacters inputType}}{{else}}Nil{{/if}}(Context{{#if inputType}}{{removeSpecialCharacters inputType}}{{else}}Nil{{/if}} message) returns grpc:Error? {
        return self.sClient->send(message);
    }

    isolated remote function receive{{#if outputType}}{{removeSpecialCharacters outputType}}{{/if}}() returns {{#if outputType}}{{outputType}}|grpc:Error?{{else}}grpc:Error?{{/if}} {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, headers] = response;
            {{#if outputType}}{{#not_equal outputType "string"}}return <{{outputType}}>payload;{{/not_equal}}{{#equals outputType "string"}}return payload.toString();{{/equals}}{{/if}}
        }
    }

    isolated remote function receiveContext{{#if outputType}}{{removeSpecialCharacters outputType}}{{else}}Nil{{/if}}() returns Context{{#if outputType}}{{removeSpecialCharacters outputType}}{{else}}Nil{{/if}}|grpc:Error? {
        var response = check self.sClient->receive();
        if response is () {
            return response;
        } else {
            [anydata, map<string|string[]>] [payload, headers] = response;
            {{#if outputType}}{{#not_equal outputType "string"}}
            return {content: <{{outputType}}>payload, headers: headers};
            {{/not_equal}}{{#equals outputType "string"}}return {content: payload.toString(), headers: headers};{{/equals}}{{else}}return {headers: headers};{{/if}}
        }
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.sClient->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.sClient->complete();
    }
}