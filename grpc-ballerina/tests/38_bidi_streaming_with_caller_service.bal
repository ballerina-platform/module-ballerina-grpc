// Copyright (c) 2021 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/log;

@ServiceDescriptor {
    descriptor: ROOT_DESCRIPTOR_38,
    descMap: getDescriptorMap38()
}
service "Chat" on new Listener(9128) {
    remote function chat(ChatStringCaller caller, stream<ChatMessage, Error> clientStream)
                            returns error? {
        log:printInfo("Invoke the chat RPC");
        string[] responses = [];
        int i = 0;
        // Read and process each message in the client stream.
        error? e = clientStream.forEach(function(ChatMessage value) {
            // responses[i] = string `${chatMsg.message}: ${chatMsg.name}`;
            checkpanic caller->sendString(string `${value.message}: ${value.name}`);
            i += 1;
        });
        log:printInfo("client messages", count = i);
        // Once the client sends a notification to indicate the end of the stream, 'EOS' is returned by the stream.
        // return responses.toStream();
    }
}

const string ROOT_DESCRIPTOR_38 = "0A22677270635F6269646972656374696F6E616C5F73747265616D696E672E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F223B0A0B436861744D65737361676512120A046E616D6518012001280952046E616D6512180A076D65737361676518022001280952076D657373616765323E0A044368617412360A0463686174120C2E436861744D6573736167651A1C2E676F6F676C652E70726F746F6275662E537472696E6756616C756528013001620670726F746F33";
isolated function getDescriptorMap38() returns map<string> {
    return {
        "grpc_bidirectional_streaming.proto":"0A22677270635F6269646972656374696F6E616C5F73747265616D696E672E70726F746F1A1E676F6F676C652F70726F746F6275662F77726170706572732E70726F746F223B0A0B436861744D65737361676512120A046E616D6518012001280952046E616D6512180A076D65737361676518022001280952076D657373616765323E0A044368617412360A0463686174120C2E436861744D6573736167651A1C2E676F6F676C652E70726F746F6275662E537472696E6756616C756528013001620670726F746F33",
        "google/protobuf/wrappers.proto

    };
}
